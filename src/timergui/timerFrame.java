/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package timergui;

import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.Date;
import java.util.TimerTask;
import java.util.Timer;
import java.util.logging.Level;
import java.util.logging.Logger;

public class timerFrame extends javax.swing.JFrame {

    Date currentTime;
    int startMinute;
    int startSecond;
    int startTotalTime;
    int finalMinute;
    int finalSecond;
    int pauseOrPlay;
    int pauseMinute;
    int pauseSecond;
    public timerFrame() {
        initComponents();
        
        
    }
    public String getTime(){
        if(pauseOrPlay == 1){
            LocalDateTime now = LocalDateTime.now();
            int minute = now.getMinute();
            int second = now.getSecond();
            int totalTime = (minute*60)+second;
            int totalTimeDifference = totalTime - startTotalTime;
            finalSecond = totalTimeDifference % 60;
            totalTimeDifference = totalTimeDifference  - finalSecond;
            finalMinute = totalTimeDifference / 60;
            if(finalSecond < 10){
                String time = Integer.toString(finalMinute)+":0"+Integer.toString(finalSecond);
                return time;
            }else{
                String time = Integer.toString(finalMinute)+":"+Integer.toString(finalSecond);
                return time;
            }
        }else if((pauseOrPlay%2) == 0){
            if(finalSecond < 10){
                String time = Integer.toString(finalMinute)+":0"+Integer.toString(finalSecond);
                return time;
            }else{
                String time = Integer.toString(finalMinute)+":"+Integer.toString(finalSecond);
                return time;
            }
        }else{
            LocalDateTime now = LocalDateTime.now();
            int minute = now.getMinute();
            int second = now.getSecond();
            int totalTime = (minute*60)+second;
            int totalTimeDifference = totalTime - startTotalTime;
            finalSecond = totalTimeDifference % 60;
            totalTimeDifference = totalTimeDifference  - finalSecond;
            finalMinute = totalTimeDifference / 60;
            if(finalSecond < 10){
                String time = Integer.toString(finalMinute)+":0"+Integer.toString(finalSecond);
                return time;
            }else{
                String time = Integer.toString(finalMinute)+":"+Integer.toString(finalSecond);
                return time;
            }
            
        }
    }
    private void completeTask() {
        try {
            //assuming it takes 20 secs to complete the task
            Thread.sleep(1000);
            
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        timerText = new javax.swing.JTextArea();
        startPauseButton = new javax.swing.JToggleButton();
        resetButton = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setFocusTraversalPolicyProvider(true);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        timerText.setColumns(20);
        timerText.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        timerText.setRows(1);
        timerText.setTabSize(1);
        timerText.setText("0:00");
        jScrollPane1.setViewportView(timerText);

        startPauseButton.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        startPauseButton.setText("Play/Pause");
        startPauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startPauseButtonActionPerformed(evt);
            }
        });

        resetButton.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(452, 452, 452)
                        .addComponent(startPauseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(594, 594, 594)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(859, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(182, 182, 182)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startPauseButton)
                    .addComponent(resetButton))
                .addContainerGap(886, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startPauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startPauseButtonActionPerformed
        pauseOrPlay++;
        LocalDateTime now = LocalDateTime.now();
        if(pauseOrPlay == 1){
            startMinute = now.getMinute();
            startSecond = now.getSecond();
            startTotalTime = (startMinute*60)+startSecond;
        }
        if((pauseOrPlay % 2) == 0){
            pauseMinute = now.getMinute();
            pauseSecond = now.getSecond();
            startTotalTime = startTotalTime + ((pauseMinute*60)+pauseSecond) - (startTotalTime + ((finalMinute*60)+finalSecond)) +1 ;
            
        }    
        TimerTask task = new TimerTask() {
            public void run() {
                timerText.setText(getTime());
            }
        };
        
        Timer timer = new Timer("Timer");
        
        
        long delay = 1000L;
        long period = 1000L;
        timer.scheduleAtFixedRate(task, delay, period);
        
        
        
                           

    }//GEN-LAST:event_startPauseButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        pauseOrPlay = 0;
        timerText.setText("0:00");
    }//GEN-LAST:event_resetButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(timerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(timerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(timerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(timerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new timerFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JToggleButton resetButton;
    public javax.swing.JToggleButton startPauseButton;
    private javax.swing.JTextArea timerText;
    // End of variables declaration//GEN-END:variables
}
